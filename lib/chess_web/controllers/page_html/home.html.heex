<.flash_group flash={@flash} />
  <style>
    body {
      background: rgba(182, 242, 15, 1);
      padding: 30px;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }
    .board {
      width: 100%;
      aspect-ratio: 1/1;
      background: rgba(255, 255, 255, 1);
      display: grid;
      grid-template-columns: repeat(8, 1fr);
      grid-template-rows: repeat(8, 1fr);
      border-style: solid;
      border-color: rgba( 220, 127, 155, 1);
      border-width: 1px;
      border-radius: 5px;
    }
    .square {
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
      font-weight: bold;
    }
    .white {
      background: white;
    }
    .pink {
      background: rgba( 247, 161, 196, 1);
    }
    .figure {
      width: 100%;
      height: 100%;
      position: relative;
      background-size: contain;
      cursor: pointer;
    }
  </style>
  <div class="board" id="chessboard">
  </div>
  <script>
    const board = document.getElementById("chessboard");
    let draggedFigure = null;

    const columns = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];

    // Define figure paths for both colors
    const figurePaths = {
      'pesec-a': 'url(/images/pesec-a.png)',
      'pesec-b': 'url(/images/pesec-b.png)',
      'kun-a': 'url(/images/kun-a.png)',
      'kun-b': 'url(/images/kun-b.png)',
      'strelec-a': 'url(/images/strelec-a.png)',
      'strelec-b': 'url(/images/strelec-b.png)',
      'vez-a': 'url(/images/vez-a.png)',
      'vez-b': 'url(/images/vez-b.png)',
      'kral-a': 'url(/images/kral-a.png)',
      'kral-b': 'url(/images/kral-b.png)',
      'kralovna-a': 'url(/images/kralovna-a.png)',
      'kralovna-b': 'url(/images/kralovna-b.png)',
    };

    // Function to create a figure element with the specified class name
    function createFigure(className) {
      const figure = document.createElement("div");
      figure.classList.add("figure", className);
      figure.style.backgroundImage = figurePaths[className];
      figure.draggable = true;

      figure.addEventListener('dragstart', (event) => {
        draggedFigure = figure;
      });

      figure.addEventListener('dragend', () => {
        draggedFigure = null;
      });

      return figure;
    }

    // Define the starting positions of all figures
    const startingPositions = [
      'vez-a', 'kun-a', 'strelec-a', 'kralovna-a', 'kral-a', 'strelec-a', 'kun-a', 'vez-a',
      'pesec-a', 'pesec-a', 'pesec-a', 'pesec-a', 'pesec-a', 'pesec-a', 'pesec-a', 'pesec-a',
      '', '', '', '', '', '', '', '',
      '', '', '', '', '', '', '', '',
      '', '', '', '', '', '', '', '',
      '', '', '', '', '', '', '', '',
      'pesec-b', 'pesec-b', 'pesec-b', 'pesec-b', 'pesec-b', 'pesec-b', 'pesec-b', 'pesec-b',
      'vez-b', 'kun-b', 'strelec-b', 'kralovna-b', 'kral-b', 'strelec-b', 'kun-b', 'vez-b',
    ];

    // Iterate over the chessboard squares and place figures
    for (let row = 8; row >= 1; row--) {
      for (let col = 0; col < 8; col++) {
        const square = document.createElement("div");
        square.classList.add("square", (row + col) % 2 === 0 ? "white" : "pink");

        // Place figures based on the starting positions array
        const figureClass = startingPositions.pop();
        if (figureClass) {
          square.appendChild(createFigure(figureClass));
        }

        square.addEventListener('dragover', (event) => {
          event.preventDefault();
        });

        square.addEventListener('drop', (event) => {
          if (draggedFigure) {
            event.preventDefault();
            square.appendChild(draggedFigure);
          }
        });

        board.appendChild(square);
      }
    }
  </script>
